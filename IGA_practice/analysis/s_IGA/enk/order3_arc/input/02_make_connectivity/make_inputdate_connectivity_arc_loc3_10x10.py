import numpy as np
import matplotlib.pyplot as plt
import math
import make_inputdate_function as mif

# difine filename
filename = "connectivity_arc_loc3_10x10"

# patch info (ξ方向のコントロールポイント個数, η方向のコントロールポイント個数)
patch_info = np.array([10, 10])

# patch info 1行2列の時の例外処理
if np.array(patch_info.shape).shape[0] == 1:
    patch_info = np.array([[patch_info[0], patch_info[1]]])

xi_max = 0
eta_max = 0
for i in range(patch_info.shape[0]):
    if xi_max < patch_info[i][0]:
        xi_max = patch_info[i][0]
    if eta_max < patch_info[i][1]:
        eta_max = patch_info[i][1]

# パッチのコントロールポイント 座標，重み
patch = np.zeros((patch_info.shape[0], xi_max * eta_max, 3))
patch_bool = np.zeros((patch_info.shape[0], xi_max * eta_max, 3), dtype=bool)
for i in range(patch_info.shape[0]):
    patch_bool[i,:patch_info[i][0]*patch_info[i][1],:] = True

# 各パッチ入力
num = 0
patch[num,:patch_info[num][0]*patch_info[num][1],:] = np.array(
   [[1.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0476190476190477e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.1428571428571428e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.2857142857142858e+00,	0.0000000000000000e+00,	9.9999999999999989e-01],
    [1.4285714285714286e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.5714285714285714e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.7142857142857144e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.8571428571428572e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.9523809523809523e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [2.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0000000000000000e+00,	7.8840936161031966e-02,	9.7210540773205223e-01],
    [1.0476190476190477e+00,	8.2595266454414437e-02,	9.7210540773205223e-01],
    [1.1428571428571428e+00,	9.0103927041179380e-02,	9.7210540773205223e-01],
    [1.2857142857142858e+00,	1.0136691792132681e-01,	9.7210540773205212e-01],
    [1.4285714285714284e+00,	1.1262990880147422e-01,	9.7210540773205223e-01],
    [1.5714285714285714e+00,	1.2389289968162165e-01,	9.7210540773205223e-01],
    [1.7142857142857144e+00,	1.3515589056176908e-01,	9.7210540773205223e-01],
    [1.8571428571428572e+00,	1.4641888144191650e-01,	9.7210540773205223e-01],
    [1.9523809523809523e+00,	1.5392754202868145e-01,	9.7210540773205223e-01],
    [2.0000000000000000e+00,	1.5768187232206393e-01,	9.7210540773205223e-01],
    [9.8815430172276020e-01,	2.3691396554479624e-01,	9.2428610670128442e-01],
    [1.0352092684714631e+00,	2.4819558295169128e-01,	9.2428610670128453e-01],
    [1.1293192019688687e+00,	2.7075881776548139e-01,	9.2428610670128442e-01],
    [1.2704841022149775e+00,	3.0460366998616661e-01,	9.2428610670128419e-01],
    [1.4116490024610859e+00,	3.3844852220685173e-01,	9.2428610670128442e-01],
    [1.5528139027071948e+00,	3.7229337442753691e-01,	9.2428610670128442e-01],
    [1.6939788029533032e+00,	4.0613822664822208e-01,	9.2428610670128442e-01],
    [1.8351437031994118e+00,	4.3998307886890725e-01,	9.2428610670128442e-01],
    [1.9292536366968176e+00,	4.6254631368269733e-01,	9.2428610670128442e-01],
    [1.9763086034455204e+00,	4.7382793108959248e-01,	9.2428610670128442e-01],
    [9.2739697290564982e-01,	4.5985470896153996e-01,	8.7646680567051660e-01],
    [9.7155873352020439e-01,	4.8175255224542285e-01,	8.7646680567051671e-01],
    [1.0598822547493141e+00,	5.2554823881318846e-01,	8.7646680567051660e-01],
    [1.1923675365929784e+00,	5.9124176866483724e-01,	8.7646680567051638e-01],
    [1.3248528184366426e+00,	6.5693529851648569e-01,	8.7646680567051660e-01],
    [1.4573381002803070e+00,	7.2262882836813436e-01,	8.7646680567051660e-01],
    [1.5898233821239711e+00,	7.8832235821978280e-01,	8.7646680567051660e-01],
    [1.7223086639676353e+00,	8.5401588807143136e-01,	8.7646680567051660e-01],
    [1.8106321851967448e+00,	8.9781157463919714e-01,	8.7646680567051660e-01],
    [1.8547939458112996e+00,	9.1970941792307992e-01,	8.7646680567051660e-01],
    [8.1702429809208277e-01,	6.5814165201237163e-01,	8.5255715515513286e-01],
    [8.5593021704884875e-01,	6.8948173067962759e-01,	8.5255715515513286e-01],
    [9.3374205496238039e-01,	7.5216188801413897e-01,	8.5255715515513286e-01],
    [1.0504598118326780e+00,	8.4618212401590664e-01,	8.5255715515513253e-01],
    [1.1671775687029753e+00,	9.4020236001767366e-01,	8.5255715515513286e-01],
    [1.2838953255732730e+00,	1.0342225960194411e+00,	8.5255715515513286e-01],
    [1.4006130824435703e+00,	1.1282428320212083e+00,	8.5255715515513286e-01],
    [1.5173308393138680e+00,	1.2222630680229760e+00,	8.5255715515513286e-01],
    [1.5951426772273998e+00,	1.2849432253574873e+00,	8.5255715515513286e-01],
    [1.6340485961841655e+00,	1.3162833040247433e+00,	8.5255715515513286e-01],
    [6.5814165201237163e-01,	8.1702429809208288e-01,	8.5255715515513286e-01],
    [6.8948173067962748e-01,	8.5593021704884875e-01,	8.5255715515513286e-01],
    [7.5216188801413919e-01,	9.3374205496238027e-01,	8.5255715515513286e-01],
    [8.4618212401590664e-01,	1.0504598118326780e+00,	8.5255715515513253e-01],
    [9.4020236001767366e-01,	1.1671775687029753e+00,	8.5255715515513286e-01],
    [1.0342225960194413e+00,	1.2838953255732730e+00,	8.5255715515513286e-01],
    [1.1282428320212083e+00,	1.4006130824435705e+00,	8.5255715515513286e-01],
    [1.2222630680229760e+00,	1.5173308393138683e+00,	8.5255715515513286e-01],
    [1.2849432253574873e+00,	1.5951426772273998e+00,	8.5255715515513286e-01],
    [1.3162833040247433e+00,	1.6340485961841658e+00,	8.5255715515513286e-01],
    [4.5985470896153990e-01,	9.2739697290564971e-01,	8.7646680567051671e-01],
    [4.8175255224542285e-01,	9.7155873352020472e-01,	8.7646680567051671e-01],
    [5.2554823881318857e-01,	1.0598822547493139e+00,	8.7646680567051671e-01],
    [5.9124176866483702e-01,	1.1923675365929782e+00,	8.7646680567051649e-01],
    [6.5693529851648569e-01,	1.3248528184366424e+00,	8.7646680567051671e-01],
    [7.2262882836813425e-01,	1.4573381002803067e+00,	8.7646680567051671e-01],
    [7.8832235821978258e-01,	1.5898233821239709e+00,	8.7646680567051671e-01],
    [8.5401588807143136e-01,	1.7223086639676350e+00,	8.7646680567051671e-01],
    [8.9781157463919681e-01,	1.8106321851967448e+00,	8.7646680567051671e-01],
    [9.1970941792307981e-01,	1.8547939458112994e+00,	8.7646680567051671e-01],
    [2.3691396554479624e-01,	9.8815430172276009e-01,	9.2428610670128442e-01],
    [2.4819558295169128e-01,	1.0352092684714631e+00,	9.2428610670128442e-01],
    [2.7075881776548139e-01,	1.1293192019688687e+00,	9.2428610670128442e-01],
    [3.0460366998616661e-01,	1.2704841022149773e+00,	9.2428610670128419e-01],
    [3.3844852220685173e-01,	1.4116490024610859e+00,	9.2428610670128442e-01],
    [3.7229337442753691e-01,	1.5528139027071948e+00,	9.2428610670128442e-01],
    [4.0613822664822208e-01,	1.6939788029533032e+00,	9.2428610670128442e-01],
    [4.3998307886890725e-01,	1.8351437031994120e+00,	9.2428610670128442e-01],
    [4.6254631368269733e-01,	1.9292536366968174e+00,	9.2428610670128442e-01],
    [4.7382793108959248e-01,	1.9763086034455202e+00,	9.2428610670128442e-01],
    [7.8840936161031980e-02,	1.0000000000000000e+00,	9.7210540773205212e-01],
    [8.2595266454414465e-02,	1.0476190476190477e+00,	9.7210540773205212e-01],
    [9.0103927041179421e-02,	1.1428571428571428e+00,	9.7210540773205212e-01],
    [1.0136691792132685e-01,	1.2857142857142858e+00,	9.7210540773205201e-01],
    [1.1262990880147428e-01,	1.4285714285714286e+00,	9.7210540773205212e-01],
    [1.2389289968162172e-01,	1.5714285714285714e+00,	9.7210540773205212e-01],
    [1.3515589056176913e-01,	1.7142857142857144e+00,	9.7210540773205212e-01],
    [1.4641888144191659e-01,	1.8571428571428574e+00,	9.7210540773205212e-01],
    [1.5392754202868147e-01,	1.9523809523809523e+00,	9.7210540773205212e-01],
    [1.5768187232206396e-01,	2.0000000000000000e+00,	9.7210540773205212e-01],
    [0.0000000000000000e+00,	1.0000000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.0476190476190477e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.1428571428571428e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.2857142857142858e+00,	9.9999999999999989e-01],
    [0.0000000000000000e+00,	1.4285714285714286e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.5714285714285714e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.7142857142857144e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.8571428571428572e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.9523809523809523e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	2.0000000000000000e+00,	1.0000000000000000e+00]])

# 重複ありの総コントロールポイント数
allpointnumber_overlapping = 0
for i in range(patch_info.shape[0]):
    allpointnumber_overlapping += patch_info[i][0] * patch_info[i][1]

globalpoint = np.zeros((allpointnumber_overlapping))
globalpoint_x = np.zeros((allpointnumber_overlapping))
globalpoint_y = np.zeros((allpointnumber_overlapping))
globalpoint_w = np.zeros((allpointnumber_overlapping))
globalpoint_bool = np.zeros((allpointnumber_overlapping), dtype = bool)

localpoint = np.zeros((patch_info.shape[0], xi_max * eta_max))
localpoint_bool = np.zeros((patch_info.shape[0], xi_max * eta_max), dtype=bool)
for i in range(patch_info.shape[0]):
    localpoint_bool[i,:patch_info[i][0]*patch_info[i][1]] = True

xi_and_eta_max = xi_max
if xi_max < eta_max:
    xi_and_eta_max = eta_max
A = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max))
A_bool = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max), dtype=bool)

# connect patch
xi = 0
eta = 1
positive = 0
negative = 1

patch_number = 0
globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool = \
    mif.connect_patch_arg_0boundary(patch_number, patch_info, patch, patch_bool, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool)

# 座標，パッチコネクティビティー，境界の辺をtxt出力
# [patch_number, xi_or_eta, 0_or_1(int)] (auto marge)
boundary_array_0 = np.array([[0, eta, 0],
                             [0, xi, 1]])

boundary_array_1 = np.array([[0,  xi, 1],
                             [0, eta, 1]])

boundary_number = 0
mif.write_date_header(filename)
mif.write_date_localpoint(filename, patch_info, localpoint, localpoint_bool)
mif.write_date_globalpoint(filename, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_0, boundary_number)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_1, boundary_number)


# 描写
color = np.array(["r", "g", "b", "c", "m", "y", "k"])
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

A = np.zeros((globalpoint[globalpoint_bool].shape[0],3))
for i in range(globalpoint[globalpoint_bool].shape[0]):
    A[i][0] = globalpoint[globalpoint_bool][i]
    A[i][1] = globalpoint_x[globalpoint_bool][i]
    A[i][2] = globalpoint_y[globalpoint_bool][i]
ax1.plot(A[:,1], A[:,2], c=color[0], marker="", linewidth=0.7)
for i in range(globalpoint[globalpoint_bool].shape[0]):
    ax1.text(A[i,1], A[i,2], str(int(A[i,0])), c=color[3], fontsize=6)


ax1.set_aspect('equal', adjustable='box')
ax1.set_axisbelow(True)
fig.set_figheight(9)
fig.set_figwidth(12)
ax1.grid()
ax1.set_xlim(-1, 3)
ax1.set_ylim(-1, 3)
plt.show()