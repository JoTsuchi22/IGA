import numpy as np
import matplotlib.pyplot as plt
import math
import make_inputdate_function as mif

# difine filename
filename = "connectivity_arc_loc3_10x10"

# patch info (ξ方向のコントロールポイント個数, η方向のコントロールポイント個数)
patch_info = np.array([10, 10])

# patch info 1行2列の時の例外処理
if np.array(patch_info.shape).shape[0] == 1:
    patch_info = np.array([[patch_info[0], patch_info[1]]])

xi_max = 0
eta_max = 0
for i in range(patch_info.shape[0]):
    if xi_max < patch_info[i][0]:
        xi_max = patch_info[i][0]
    if eta_max < patch_info[i][1]:
        eta_max = patch_info[i][1]

# パッチのコントロールポイント 座標，重み
patch = np.zeros((patch_info.shape[0], xi_max * eta_max, 3))
patch_bool = np.zeros((patch_info.shape[0], xi_max * eta_max, 3), dtype=bool)
for i in range(patch_info.shape[0]):
    patch_bool[i,:patch_info[i][0]*patch_info[i][1],:] = True

# 各パッチ入力
num = 0
patch[num,:patch_info[num][0]*patch_info[num][1],:] = np.array(
   [[1.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.1904761904761905e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.5714285714285714e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [2.1428571428571432e+00,	0.0000000000000000e+00,	9.9999999999999989e-01],
    [2.7142857142857140e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [3.2857142857142865e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [3.8571428571428572e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [4.4285714285714288e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [4.8095238095238093e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [5.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0000000000000000e+00,	6.9275926699411725e-02,	9.7210540773205223e-01],
    [1.1904761904761905e+00,	8.2471341308823498e-02,	9.7210540773205223e-01],
    [1.5714285714285714e+00,	1.0886217052764699e-01,	9.7210540773205223e-01],
    [2.1428571428571428e+00,	1.4844841435588227e-01,	9.7210540773205212e-01],
    [2.7142857142857140e+00,	1.8803465818411752e-01,	9.7210540773205223e-01],
    [3.2857142857142860e+00,	2.2762090201235283e-01,	9.7210540773205223e-01],
    [3.8571428571428572e+00,	2.6720714584058802e-01,	9.7210540773205223e-01],
    [4.4285714285714288e+00,	3.0679338966882336e-01,	9.7210540773205223e-01],
    [4.8095238095238093e+00,	3.3318421888764682e-01,	9.7210540773205223e-01],
    [5.0000000000000009e+00,	3.4637963349705864e-01,	9.7210540773205223e-01],
    [9.8528005335336311e-01,	2.1248285440492004e-01,	9.2428610670128442e-01],
    [1.1729524444682893e+00,	2.5295577905347622e-01,	9.2428610670128453e-01],
    [1.5482972266981418e+00,	3.3390162835058862e-01,	9.2428610670128442e-01],
    [2.1113144000429211e+00,	4.5532040229625725e-01,	9.2428610670128419e-01],
    [2.6743315733876996e+00,	5.7673917624192572e-01,	9.2428610670128442e-01],
    [3.2373487467324789e+00,	6.9815795018759441e-01,	9.2428610670128442e-01],
    [3.8003659200772573e+00,	8.1957672413326299e-01,	9.2428610670128442e-01],
    [4.3633830934220361e+00,	9.4099549807893168e-01,	9.2428610670128442e-01],
    [4.7387278756518887e+00,	1.0219413473760439e+00,	9.2428610670128442e-01],
    [4.9264002667668159e+00,	1.0624142720245999e+00,	9.2428610670128442e-01],
    [9.1462319908904877e-01,	4.2564697568996424e-01,	8.7646680567051660e-01],
    [1.0888371417726770e+00,	5.0672259010710030e-01,	8.7646680567051671e-01],
    [1.4372650271399339e+00,	6.6887381894137243e-01,	8.7646680567051660e-01],
    [1.9599068551908192e+00,	9.1210066219278074e-01,	8.7646680567051638e-01],
    [2.4825486832417036e+00,	1.1553275054441887e+00,	8.7646680567051660e-01],
    [3.0051905112925894e+00,	1.3985543486955969e+00,	8.7646680567051660e-01],
    [3.5278323393434738e+00,	1.6417811919470051e+00,	8.7646680567051660e-01],
    [4.0504741673943592e+00,	1.8850080351984129e+00,	8.7646680567051660e-01],
    [4.3989020527616152e+00,	2.0471592640326848e+00,	8.7646680567051660e-01],
    [4.5731159954452432e+00,	2.1282348784498208e+00,	8.7646680567051660e-01],
    [7.9254089039093678e-01,	6.2497776339900124e-01,	8.5255715515513286e-01],
    [9.4350105998921052e-01,	7.4402114690357291e-01,	8.5255715515513286e-01],
    [1.2454213991857577e+00,	9.8210791391271612e-01,	8.5255715515513286e-01],
    [1.6983019079805799e+00,	1.3392380644264317e+00,	8.5255715515513253e-01],
    [2.1511824167753999e+00,	1.6963682149401460e+00,	8.5255715515513286e-01],
    [2.6040629255702217e+00,	2.0534983654538612e+00,	8.5255715515513286e-01],
    [3.0569434343650417e+00,	2.4106285159675762e+00,	8.5255715515513286e-01],
    [3.5098239431598630e+00,	2.7677586664812912e+00,	8.5255715515513286e-01],
    [3.8117442823564107e+00,	3.0058454334904341e+00,	8.5255715515513286e-01],
    [3.9627044519546843e+00,	3.1248888169950062e+00,	8.5255715515513286e-01],
    [6.2497776339900124e-01,	7.9254089039093689e-01,	8.5255715515513286e-01],
    [7.4402114690357291e-01,	9.4350105998921052e-01,	8.5255715515513286e-01],
    [9.8210791391271635e-01,	1.2454213991857579e+00,	8.5255715515513286e-01],
    [1.3392380644264319e+00,	1.6983019079805799e+00,	8.5255715515513253e-01],
    [1.6963682149401460e+00,	2.1511824167753999e+00,	8.5255715515513286e-01],
    [2.0534983654538612e+00,	2.6040629255702212e+00,	8.5255715515513286e-01],
    [2.4106285159675762e+00,	3.0569434343650426e+00,	8.5255715515513286e-01],
    [2.7677586664812912e+00,	3.5098239431598630e+00,	8.5255715515513286e-01],
    [3.0058454334904345e+00,	3.8117442823564107e+00,	8.5255715515513286e-01],
    [3.1248888169950058e+00,	3.9627044519546848e+00,	8.5255715515513286e-01],
    [4.2564697568996418e-01,	9.1462319908904866e-01,	8.7646680567051671e-01],
    [5.0672259010710030e-01,	1.0888371417726770e+00,	8.7646680567051671e-01],
    [6.6887381894137221e-01,	1.4372650271399336e+00,	8.7646680567051671e-01],
    [9.1210066219278052e-01,	1.9599068551908190e+00,	8.7646680567051649e-01],
    [1.1553275054441883e+00,	2.4825486832417036e+00,	8.7646680567051671e-01],
    [1.3985543486955965e+00,	3.0051905112925890e+00,	8.7646680567051671e-01],
    [1.6417811919470049e+00,	3.5278323393434734e+00,	8.7646680567051671e-01],
    [1.8850080351984126e+00,	4.0504741673943592e+00,	8.7646680567051671e-01],
    [2.0471592640326848e+00,	4.3989020527616152e+00,	8.7646680567051671e-01],
    [2.1282348784498208e+00,	4.5731159954452432e+00,	8.7646680567051671e-01],
    [2.1248285440492004e-01,	9.8528005335336299e-01,	9.2428610670128442e-01],
    [2.5295577905347622e-01,	1.1729524444682895e+00,	9.2428610670128442e-01],
    [3.3390162835058856e-01,	1.5482972266981418e+00,	9.2428610670128442e-01],
    [4.5532040229625725e-01,	2.1113144000429211e+00,	9.2428610670128419e-01],
    [5.7673917624192572e-01,	2.6743315733876991e+00,	9.2428610670128442e-01],
    [6.9815795018759452e-01,	3.2373487467324793e+00,	9.2428610670128442e-01],
    [8.1957672413326299e-01,	3.8003659200772573e+00,	9.2428610670128442e-01],
    [9.4099549807893146e-01,	4.3633830934220361e+00,	9.2428610670128442e-01],
    [1.0219413473760439e+00,	4.7387278756518887e+00,	9.2428610670128442e-01],
    [1.0624142720245999e+00,	4.9264002667668159e+00,	9.2428610670128442e-01],
    [6.9275926699411738e-02,	1.0000000000000000e+00,	9.7210540773205212e-01],
    [8.2471341308823512e-02,	1.1904761904761905e+00,	9.7210540773205212e-01],
    [1.0886217052764702e-01,	1.5714285714285714e+00,	9.7210540773205212e-01],
    [1.4844841435588232e-01,	2.1428571428571432e+00,	9.7210540773205201e-01],
    [1.8803465818411760e-01,	2.7142857142857140e+00,	9.7210540773205212e-01],
    [2.2762090201235291e-01,	3.2857142857142865e+00,	9.7210540773205212e-01],
    [2.6720714584058819e-01,	3.8571428571428572e+00,	9.7210540773205212e-01],
    [3.0679338966882347e-01,	4.4285714285714288e+00,	9.7210540773205212e-01],
    [3.3318421888764699e-01,	4.8095238095238093e+00,	9.7210540773205212e-01],
    [3.4637963349705869e-01,	5.0000000000000009e+00,	9.7210540773205212e-01],
    [0.0000000000000000e+00,	1.0000000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.1904761904761905e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.5714285714285714e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	2.1428571428571432e+00,	9.9999999999999989e-01],
    [0.0000000000000000e+00,	2.7142857142857140e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	3.2857142857142865e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	3.8571428571428572e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	4.4285714285714288e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	4.8095238095238093e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	5.0000000000000000e+00,	1.0000000000000000e+00]])

# 重複ありの総コントロールポイント数
allpointnumber_overlapping = 0
for i in range(patch_info.shape[0]):
    allpointnumber_overlapping += patch_info[i][0] * patch_info[i][1]

globalpoint = np.zeros((allpointnumber_overlapping))
globalpoint_x = np.zeros((allpointnumber_overlapping))
globalpoint_y = np.zeros((allpointnumber_overlapping))
globalpoint_w = np.zeros((allpointnumber_overlapping))
globalpoint_bool = np.zeros((allpointnumber_overlapping), dtype = bool)

localpoint = np.zeros((patch_info.shape[0], xi_max * eta_max))
localpoint_bool = np.zeros((patch_info.shape[0], xi_max * eta_max), dtype=bool)
for i in range(patch_info.shape[0]):
    localpoint_bool[i,:patch_info[i][0]*patch_info[i][1]] = True

xi_and_eta_max = xi_max
if xi_max < eta_max:
    xi_and_eta_max = eta_max
A = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max))
A_bool = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max), dtype=bool)

# connect patch
xi = 0
eta = 1
positive = 0
negative = 1

patch_number = 0
globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool = \
    mif.connect_patch_arg_0boundary(patch_number, patch_info, patch, patch_bool, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool)

# 座標，パッチコネクティビティー，境界の辺をtxt出力
# [patch_number, xi_or_eta, 0_or_1(int)] (auto marge)
boundary_array_0 = np.array([[0, eta, 0],
                             [0, xi, 1]])

boundary_array_1 = np.array([[0,  xi, 1],
                             [0, eta, 1]])

boundary_number = 0
mif.write_date_header(filename)
mif.write_date_localpoint(filename, patch_info, localpoint, localpoint_bool)
mif.write_date_globalpoint(filename, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_0, boundary_number)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_1, boundary_number)


# 描写
color = np.array(["r", "g", "b", "c", "m", "y", "k"])
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

A = np.zeros((globalpoint[globalpoint_bool].shape[0],3))
for i in range(globalpoint[globalpoint_bool].shape[0]):
    A[i][0] = globalpoint[globalpoint_bool][i]
    A[i][1] = globalpoint_x[globalpoint_bool][i]
    A[i][2] = globalpoint_y[globalpoint_bool][i]
ax1.plot(A[:,1], A[:,2], c=color[0], marker="", linewidth=0.7)
for i in range(globalpoint[globalpoint_bool].shape[0]):
    ax1.text(A[i,1], A[i,2], str(int(A[i,0])), c=color[3], fontsize=6)


ax1.set_aspect('equal', adjustable='box')
ax1.set_axisbelow(True)
fig.set_figheight(9)
fig.set_figwidth(12)
ax1.grid()
ax1.set_xlim(-1, 3)
ax1.set_ylim(-1, 3)
plt.show()