import numpy as np
import matplotlib.pyplot as plt
import math
import make_inputdate_function as mif

# difine filename
filename = "connectivity_arc_loc3_10x10"

# patch info (ξ方向のコントロールポイント個数, η方向のコントロールポイント個数)
patch_info = np.array([10, 10])

# patch info 1行2列の時の例外処理
if np.array(patch_info.shape).shape[0] == 1:
    patch_info = np.array([[patch_info[0], patch_info[1]]])

xi_max = 0
eta_max = 0
for i in range(patch_info.shape[0]):
    if xi_max < patch_info[i][0]:
        xi_max = patch_info[i][0]
    if eta_max < patch_info[i][1]:
        eta_max = patch_info[i][1]

# パッチのコントロールポイント 座標，重み
patch = np.zeros((patch_info.shape[0], xi_max * eta_max, 3))
patch_bool = np.zeros((patch_info.shape[0], xi_max * eta_max, 3), dtype=bool)
for i in range(patch_info.shape[0]):
    patch_bool[i,:patch_info[i][0]*patch_info[i][1],:] = True

# 各パッチ入力
num = 0
patch[num,:patch_info[num][0]*patch_info[num][1],:] = np.array(
   [[1.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0476190476190477e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.1428571428571428e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.2857142857142858e+00,	0.0000000000000000e+00,	9.9999999999999989e-01],
    [1.4285714285714286e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.5714285714285714e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.7142857142857144e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.8571428571428572e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.9523809523809523e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [2.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0000000000000000e+00,	6.9275926699411725e-02,	9.7210540773205223e-01],
    [1.0476190476190477e+00,	7.2574780351764664e-02,	9.7210540773205223e-01],
    [1.1428571428571428e+00,	7.9172487656470530e-02,	9.7210540773205223e-01],
    [1.2857142857142858e+00,	8.9069048613529378e-02,	9.7210540773205212e-01],
    [1.4285714285714284e+00,	9.8965609570588170e-02,	9.7210540773205223e-01],
    [1.5714285714285714e+00,	1.0886217052764698e-01,	9.7210540773205223e-01],
    [1.7142857142857146e+00,	1.1875873148470580e-01,	9.7210540773205223e-01],
    [1.8571428571428572e+00,	1.2865529244176460e-01,	9.7210540773205223e-01],
    [1.9523809523809523e+00,	1.3525299974647051e-01,	9.7210540773205223e-01],
    [2.0000000000000000e+00,	1.3855185339882345e-01,	9.7210540773205223e-01],
    [9.8528005335336311e-01,	2.1248285440492004e-01,	9.2428610670128442e-01],
    [1.0321981511320946e+00,	2.2260108556705907e-01,	9.2428610670128453e-01],
    [1.1260343466895577e+00,	2.4283754789133716e-01,	9.2428610670128442e-01],
    [1.2667886400257526e+00,	2.7319224137775439e-01,	9.2428610670128419e-01],
    [1.4075429333619471e+00,	3.0354693486417150e-01,	9.2428610670128442e-01],
    [1.5482972266981418e+00,	3.3390162835058856e-01,	9.2428610670128442e-01],
    [1.6890515200343366e+00,	3.6425632183700574e-01,	9.2428610670128442e-01],
    [1.8298058133705313e+00,	3.9461101532342285e-01,	9.2428610670128442e-01],
    [1.9236420089279942e+00,	4.1484747764770097e-01,	9.2428610670128442e-01],
    [1.9705601067067262e+00,	4.2496570880984008e-01,	9.2428610670128442e-01],
    [9.1462319908904877e-01,	4.2564697568996424e-01,	8.7646680567051660e-01],
    [9.5817668475995577e-01,	4.4591587929424825e-01,	8.7646680567051671e-01],
    [1.0452836561017702e+00,	4.8645368650281623e-01,	8.7646680567051660e-01],
    [1.1759441131144914e+00,	5.4726039731566845e-01,	8.7646680567051638e-01],
    [1.3066045701272124e+00,	6.0806710812852016e-01,	8.7646680567051660e-01],
    [1.4372650271399339e+00,	6.6887381894137243e-01,	8.7646680567051660e-01],
    [1.5679254841526549e+00,	7.2968052975422426e-01,	8.7646680567051660e-01],
    [1.6985859411653761e+00,	7.9048724056707631e-01,	8.7646680567051660e-01],
    [1.7856929125071905e+00,	8.3102504777564434e-01,	8.7646680567051660e-01],
    [1.8292463981780975e+00,	8.5129395137992847e-01,	8.7646680567051660e-01],
    [7.9254089039093678e-01,	6.2497776339900124e-01,	8.5255715515513286e-01],
    [8.3028093279050552e-01,	6.5473860927514416e-01,	8.5255715515513286e-01],
    [9.0576101758964211e-01,	7.1426030102742999e-01,	8.5255715515513286e-01],
    [1.0189811447883477e+00,	8.0354283865585907e-01,	8.5255715515513253e-01],
    [1.1322012719870524e+00,	8.9282537628428760e-01,	8.5255715515513286e-01],
    [1.2454213991857577e+00,	9.8210791391271601e-01,	8.5255715515513286e-01],
    [1.3586415263844633e+00,	1.0713904515411448e+00,	8.5255715515513286e-01],
    [1.4718616535831686e+00,	1.1606729891695735e+00,	8.5255715515513286e-01],
    [1.5473417383823054e+00,	1.2201946809218593e+00,	8.5255715515513286e-01],
    [1.5850817807818736e+00,	1.2499555267980025e+00,	8.5255715515513286e-01],
    [6.2497776339900124e-01,	7.9254089039093689e-01,	8.5255715515513286e-01],
    [6.5473860927514416e-01,	8.3028093279050541e-01,	8.5255715515513286e-01],
    [7.1426030102742999e-01,	9.0576101758964211e-01,	8.5255715515513286e-01],
    [8.0354283865585907e-01,	1.0189811447883477e+00,	8.5255715515513253e-01],
    [8.9282537628428738e-01,	1.1322012719870524e+00,	8.5255715515513286e-01],
    [9.8210791391271635e-01,	1.2454213991857579e+00,	8.5255715515513286e-01],
    [1.0713904515411450e+00,	1.3586415263844629e+00,	8.5255715515513286e-01],
    [1.1606729891695737e+00,	1.4718616535831683e+00,	8.5255715515513286e-01],
    [1.2201946809218593e+00,	1.5473417383823052e+00,	8.5255715515513286e-01],
    [1.2499555267980025e+00,	1.5850817807818738e+00,	8.5255715515513286e-01],
    [4.2564697568996418e-01,	9.1462319908904866e-01,	8.7646680567051671e-01],
    [4.4591587929424825e-01,	9.5817668475995599e-01,	8.7646680567051671e-01],
    [4.8645368650281617e-01,	1.0452836561017700e+00,	8.7646680567051671e-01],
    [5.4726039731566833e-01,	1.1759441131144914e+00,	8.7646680567051649e-01],
    [6.0806710812852005e-01,	1.3066045701272122e+00,	8.7646680567051671e-01],
    [6.6887381894137232e-01,	1.4372650271399336e+00,	8.7646680567051671e-01],
    [7.2968052975422426e-01,	1.5679254841526549e+00,	8.7646680567051671e-01],
    [7.9048724056707631e-01,	1.6985859411653761e+00,	8.7646680567051671e-01],
    [8.3102504777564423e-01,	1.7856929125071903e+00,	8.7646680567051671e-01],
    [8.5129395137992836e-01,	1.8292463981780973e+00,	8.7646680567051671e-01],
    [2.1248285440492004e-01,	9.8528005335336299e-01,	9.2428610670128442e-01],
    [2.2260108556705913e-01,	1.0321981511320946e+00,	9.2428610670128442e-01],
    [2.4283754789133716e-01,	1.1260343466895577e+00,	9.2428610670128442e-01],
    [2.7319224137775433e-01,	1.2667886400257526e+00,	9.2428610670128419e-01],
    [3.0354693486417145e-01,	1.4075429333619471e+00,	9.2428610670128442e-01],
    [3.3390162835058856e-01,	1.5482972266981418e+00,	9.2428610670128442e-01],
    [3.6425632183700574e-01,	1.6890515200343366e+00,	9.2428610670128442e-01],
    [3.9461101532342291e-01,	1.8298058133705313e+00,	9.2428610670128442e-01],
    [4.1484747764770097e-01,	1.9236420089279942e+00,	9.2428610670128442e-01],
    [4.2496570880984008e-01,	1.9705601067067260e+00,	9.2428610670128442e-01],
    [6.9275926699411738e-02,	1.0000000000000000e+00,	9.7210540773205212e-01],
    [7.2574780351764692e-02,	1.0476190476190477e+00,	9.7210540773205212e-01],
    [7.9172487656470572e-02,	1.1428571428571428e+00,	9.7210540773205212e-01],
    [8.9069048613529392e-02,	1.2857142857142858e+00,	9.7210540773205201e-01],
    [9.8965609570588212e-02,	1.4285714285714286e+00,	9.7210540773205212e-01],
    [1.0886217052764703e-01,	1.5714285714285714e+00,	9.7210540773205212e-01],
    [1.1875873148470585e-01,	1.7142857142857144e+00,	9.7210540773205212e-01],
    [1.2865529244176468e-01,	1.8571428571428574e+00,	9.7210540773205212e-01],
    [1.3525299974647056e-01,	1.9523809523809523e+00,	9.7210540773205212e-01],
    [1.3855185339882348e-01,	2.0000000000000000e+00,	9.7210540773205212e-01],
    [0.0000000000000000e+00,	1.0000000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.0476190476190477e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.1428571428571428e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.2857142857142858e+00,	9.9999999999999989e-01],
    [0.0000000000000000e+00,	1.4285714285714286e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.5714285714285714e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.7142857142857144e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.8571428571428572e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.9523809523809523e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	2.0000000000000000e+00,	1.0000000000000000e+00]])

# 重複ありの総コントロールポイント数
allpointnumber_overlapping = 0
for i in range(patch_info.shape[0]):
    allpointnumber_overlapping += patch_info[i][0] * patch_info[i][1]

globalpoint = np.zeros((allpointnumber_overlapping))
globalpoint_x = np.zeros((allpointnumber_overlapping))
globalpoint_y = np.zeros((allpointnumber_overlapping))
globalpoint_w = np.zeros((allpointnumber_overlapping))
globalpoint_bool = np.zeros((allpointnumber_overlapping), dtype = bool)

localpoint = np.zeros((patch_info.shape[0], xi_max * eta_max))
localpoint_bool = np.zeros((patch_info.shape[0], xi_max * eta_max), dtype=bool)
for i in range(patch_info.shape[0]):
    localpoint_bool[i,:patch_info[i][0]*patch_info[i][1]] = True

xi_and_eta_max = xi_max
if xi_max < eta_max:
    xi_and_eta_max = eta_max
A = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max))
A_bool = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max), dtype=bool)

# connect patch
xi = 0
eta = 1
positive = 0
negative = 1

patch_number = 0
globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool = \
    mif.connect_patch_arg_0boundary(patch_number, patch_info, patch, patch_bool, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool)

# 座標，パッチコネクティビティー，境界の辺をtxt出力
# [patch_number, xi_or_eta, 0_or_1(int)] (auto marge)
boundary_array_0 = np.array([[0, eta, 0],
                             [0, xi, 1]])

boundary_array_1 = np.array([[0,  xi, 1],
                             [0, eta, 1]])

boundary_number = 0
mif.write_date_header(filename)
mif.write_date_localpoint(filename, patch_info, localpoint, localpoint_bool)
mif.write_date_globalpoint(filename, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_0, boundary_number)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_1, boundary_number)


# 描写
color = np.array(["r", "g", "b", "c", "m", "y", "k"])
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

A = np.zeros((globalpoint[globalpoint_bool].shape[0],3))
for i in range(globalpoint[globalpoint_bool].shape[0]):
    A[i][0] = globalpoint[globalpoint_bool][i]
    A[i][1] = globalpoint_x[globalpoint_bool][i]
    A[i][2] = globalpoint_y[globalpoint_bool][i]
ax1.plot(A[:,1], A[:,2], c=color[0], marker="", linewidth=0.7)
for i in range(globalpoint[globalpoint_bool].shape[0]):
    ax1.text(A[i,1], A[i,2], str(int(A[i,0])), c=color[3], fontsize=6)


ax1.set_aspect('equal', adjustable='box')
ax1.set_axisbelow(True)
fig.set_figheight(9)
fig.set_figwidth(12)
ax1.grid()
ax1.set_xlim(-1, 3)
ax1.set_ylim(-1, 3)
plt.show()