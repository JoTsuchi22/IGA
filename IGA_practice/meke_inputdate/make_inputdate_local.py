import numpy as np
import matplotlib.pyplot as plt
import math
import make_inputdate_function as mif

# difine filename
filename = "patch_loc"

# patch info (ξ方向のコントロールポイント個数, η方向のコントロールポイント個数)
patch_info = np.array([[18, 10]])

xi_max = 0
eta_max = 0
for i in range(patch_info.shape[0]):
    if xi_max < patch_info[i][0]:
        xi_max = patch_info[i][0]
    if eta_max < patch_info[i][1]:
        eta_max = patch_info[i][1]

# パッチのコントロールポイント 座標，重み
patch = np.zeros((patch_info.shape[0], xi_max * eta_max, 3))
patch_bool = np.zeros((patch_info.shape[0], xi_max * eta_max, 3), dtype=bool)
for i in range(patch_info.shape[0]):
    patch_bool[i,:patch_info[i][0]*patch_info[i][1],:] = True

# 各パッチ入力
num = 0
patch[num,:patch_info[num][0]*patch_info[num][1],:] = np.array(
   [[ 1.000000000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.031250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.093750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.156250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.218750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.281250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.343750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.406250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.468750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.531250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.593750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.656250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.718750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.781250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.843750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.906250000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.968750000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 2.000000000000000000000e+00,   0.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 1.000000000000000000000e+00,   9.174737048053263621661e-02,   9.633883476483184882255e-01 ],
    [ 1.031250000000000000000e+00,   9.461447580804926982267e-02,   9.633883476483184882255e-01 ],
    [ 1.093749999999999777955e+00,   1.003486864630825925460e-01,   9.633883476483184882255e-01 ],
    [ 1.156249999999999777955e+00,   1.060828971181158597581e-01,   9.633883476483184882255e-01 ],
    [ 1.218750000000000000000e+00,   1.118171077731491269702e-01,   9.633883476483184882255e-01 ],
    [ 1.281250000000000000000e+00,   1.175513184281824358157e-01,   9.633883476483184882255e-01 ],
    [ 1.343750000000000000000e+00,   1.232855290832157030279e-01,   9.633883476483184882255e-01 ],
    [ 1.406250000000000000000e+00,   1.290197397382490396289e-01,   9.633883476483184882255e-01 ],
    [ 1.468750000000000000000e+00,   1.347539503932823068411e-01,   9.633883476483184882255e-01 ],
    [ 1.531250000000000000000e+00,   1.404881610483156018088e-01,   9.633883476483184882255e-01 ],
    [ 1.593750000000000000000e+00,   1.462223717033488690209e-01,   9.633883476483184882255e-01 ],
    [ 1.656250000000000000000e+00,   1.519565823583821917442e-01,   9.633883476483184882255e-01 ],
    [ 1.718749999999999777955e+00,   1.576907930134154589563e-01,   9.633883476483184882255e-01 ],
    [ 1.781249999999999777955e+00,   1.634250036684487539240e-01,   9.633883476483184882255e-01 ],
    [ 1.843750000000000000000e+00,   1.691592143234820488917e-01,   9.633883476483184882255e-01 ],
    [ 1.906250000000000000000e+00,   1.748934249785153161039e-01,   9.633883476483184882255e-01 ],
    [ 1.968750000000000000000e+00,   1.806276356335486388272e-01,   9.633883476483184882255e-01 ],
    [ 2.000000000000000000000e+00,   1.834947409610652724332e-01,   9.633883476483184882255e-01 ],
    [ 9.656015387370172620152e-01,   2.776323134773617251625e-01,   9.084708691207961095415e-01 ],
    [ 9.957765868225489924725e-01,   2.863083232735292305016e-01,   9.084708691207961095415e-01 ],
    [ 1.056126682993612675432e+00,   3.036603428658644077132e-01,   9.084708691207961095415e-01 ],
    [ 1.116476779164675914302e+00,   3.210123624581994739025e-01,   9.084708691207961095415e-01 ],
    [ 1.176826875335739597261e+00,   3.383643820505345400917e-01,   9.084708691207961095415e-01 ],
    [ 1.237176971506803280221e+00,   3.557164016428697728145e-01,   9.084708691207961095415e-01 ],
    [ 1.297527067677867185225e+00,   3.730684212352047834926e-01,   9.084708691207961095415e-01 ],
    [ 1.357877163848930424095e+00,   3.904204408275399607042e-01,   9.084708691207961095415e-01 ],
    [ 1.418227260019994329099e+00,   4.077724604198750824047e-01,   9.084708691207961095415e-01 ],
    [ 1.478577356191057790014e+00,   4.251244800122102041051e-01,   9.084708691207961095415e-01 ],
    [ 1.538927452362121472973e+00,   4.424764996045451592721e-01,   9.084708691207961095415e-01 ],
    [ 1.599277548533185155932e+00,   4.598285191968803919949e-01,   9.084708691207961095415e-01 ],
    [ 1.659627644704248616847e+00,   4.771805387892154581841e-01,   9.084708691207961095415e-01 ],
    [ 1.719977740875312299806e+00,   4.945325583815506353957e-01,   9.084708691207961095415e-01 ],
    [ 1.780327837046375538677e+00,   5.118845779738857570962e-01,   9.084708691207961095415e-01 ],
    [ 1.840677933217439221636e+00,   5.292365975662207677743e-01,   9.084708691207961095415e-01 ],
    [ 1.901028029388502904595e+00,   5.465886171585558894748e-01,   9.084708691207961095415e-01 ],
    [ 1.931203077474034524030e+00,   5.552646269547234503250e-01,   9.084708691207961095415e-01 ],
    [ 8.924711717249336206947e-01,   4.623558586246681034737e-01,   8.718592167691144867447e-01 ],
    [ 9.203608958413377338914e-01,   4.768044792066889470128e-01,   8.718592167691144867447e-01 ],
    [ 9.761403440741462933516e-01,   5.057017203707309116467e-01,   8.718592167691144867447e-01 ],
    [ 1.031919792306954519745e+00,   5.345989615347724877026e-01,   8.718592167691144867447e-01 ],
    [ 1.087699240539762746138e+00,   5.634962026988141747808e-01,   8.718592167691144867447e-01 ],
    [ 1.143478688772571416621e+00,   5.923934438628560839035e-01,   8.718592167691144867447e-01 ],
    [ 1.199258137005379643014e+00,   6.212906850268977709817e-01,   8.718592167691144867447e-01 ],
    [ 1.255037585238187869408e+00,   6.501879261909395690822e-01,   8.718592167691144867447e-01 ],
    [ 1.310817033470996539890e+00,   6.790851673549813671826e-01,   8.718592167691144867447e-01 ],
    [ 1.366596481703804766283e+00,   7.079824085190230542608e-01,   8.718592167691144867447e-01 ],
    [ 1.422375929936613214721e+00,   7.368796496830647413390e-01,   8.718592167691144867447e-01 ],
    [ 1.478155378169421441115e+00,   7.657768908471065394394e-01,   8.718592167691144867447e-01 ],
    [ 1.533934826402229889553e+00,   7.946741320111483375399e-01,   8.718592167691144867447e-01 ],
    [ 1.589714274635038337991e+00,   8.235713731751901356404e-01,   8.718592167691144867447e-01 ],
    [ 1.645493722867846342339e+00,   8.524686143392318227185e-01,   8.718592167691144867447e-01 ],
    [ 1.701273171100655012822e+00,   8.813658555032736208190e-01,   8.718592167691144867447e-01 ],
    [ 1.757052619333463239215e+00,   9.102630966673154189195e-01,   8.718592167691144867447e-01 ],
    [ 1.784942343449867241389e+00,   9.247117172493362069474e-01,   8.718592167691144867447e-01 ],
    [ 7.803300858899105962863e-01,   6.338834764831844381661e-01,   8.535533905932737308575e-01 ],
    [ 8.047154010739704377286e-01,   6.536923351232838408365e-01,   8.535533905932737308575e-01 ],
    [ 8.534860314420898985688e-01,   6.933100524034830902664e-01,   8.535533905932737308575e-01 ],
    [ 9.022566618102091373643e-01,   7.329277696836820066295e-01,   8.535533905932737308575e-01 ],
    [ 9.510272921783285982045e-01,   7.725454869638809229926e-01,   8.535533905932737308575e-01 ],
    [ 9.997979225464481700669e-01,   8.121632042440801724226e-01,   8.535533905932737308575e-01 ],
    [ 1.048568552914567630907e+00,   8.517809215242791998079e-01,   8.535533905932737308575e-01 ],
    [ 1.097339183282686869703e+00,   8.913986388044782271933e-01,   8.535533905932737308575e-01 ],
    [ 1.146109813650806552587e+00,   9.310163560846772545787e-01,   8.535533905932737308575e-01 ],
    [ 1.194880444018925569338e+00,   9.706340733648761709418e-01,   8.535533905932737308575e-01 ],
    [ 1.243651074387045252223e+00,   1.010251790645075198327e+00,   8.535533905932737308575e-01 ],
    [ 1.292421704755164713063e+00,   1.049869507925274225713e+00,   8.535533905932737308575e-01 ],
    [ 1.341192335123283951859e+00,   1.089487225205473253098e+00,   8.535533905932737308575e-01 ],
    [ 1.389962965491403634744e+00,   1.129104942485672280483e+00,   8.535533905932737308575e-01 ],
    [ 1.438733595859522651494e+00,   1.168722659765871307869e+00,   8.535533905932737308575e-01 ],
    [ 1.487504226227642334379e+00,   1.208340377046070557299e+00,   8.535533905932737308575e-01 ],
    [ 1.536274856595761795219e+00,   1.247958094326269362639e+00,   8.535533905932737308575e-01 ],
    [ 1.560660171779821192573e+00,   1.267766952966368876332e+00,   8.535533905932737308575e-01 ],
    [ 6.338834764831844381661e-01,   7.803300858899105962863e-01,   8.535533905932737308575e-01 ],
    [ 6.536923351232840628811e-01,   8.047154010739703267063e-01,   8.535533905932737308575e-01 ],
    [ 6.933100524034830902664e-01,   8.534860314420898985688e-01,   8.535533905932737308575e-01 ],
    [ 7.329277696836820066295e-01,   9.022566618102091373643e-01,   8.535533905932737308575e-01 ],
    [ 7.725454869638809229926e-01,   9.510272921783285982045e-01,   8.535533905932737308575e-01 ],
    [ 8.121632042440801724226e-01,   9.997979225464481700669e-01,   8.535533905932737308575e-01 ],
    [ 8.517809215242791998079e-01,   1.048568552914567630907e+00,   8.535533905932737308575e-01 ],
    [ 8.913986388044782271933e-01,   1.097339183282686869703e+00,   8.535533905932737308575e-01 ],
    [ 9.310163560846772545787e-01,   1.146109813650806552587e+00,   8.535533905932737308575e-01 ],
    [ 9.706340733648761709418e-01,   1.194880444018925569338e+00,   8.535533905932737308575e-01 ],
    [ 1.010251790645075198327e+00,   1.243651074387045252223e+00,   8.535533905932737308575e-01 ],
    [ 1.049869507925274225713e+00,   1.292421704755164713063e+00,   8.535533905932737308575e-01 ],
    [ 1.089487225205473253098e+00,   1.341192335123283951859e+00,   8.535533905932737308575e-01 ],
    [ 1.129104942485672280483e+00,   1.389962965491403634744e+00,   8.535533905932737308575e-01 ],
    [ 1.168722659765871307869e+00,   1.438733595859522651494e+00,   8.535533905932737308575e-01 ],
    [ 1.208340377046070557299e+00,   1.487504226227642334379e+00,   8.535533905932737308575e-01 ],
    [ 1.247958094326269362639e+00,   1.536274856595761795219e+00,   8.535533905932737308575e-01 ],
    [ 1.267766952966368876332e+00,   1.560660171779821192573e+00,   8.535533905932737308575e-01 ],
    [ 4.623558586246681589849e-01,   8.924711717249336206947e-01,   8.718592167691144867447e-01 ],
    [ 4.768044792066890025239e-01,   9.203608958413378449137e-01,   8.718592167691144867447e-01 ],
    [ 5.057017203707309116467e-01,   9.761403440741462933516e-01,   8.718592167691144867447e-01 ],
    [ 5.345989615347724877026e-01,   1.031919792306954519745e+00,   8.718592167691144867447e-01 ],
    [ 5.634962026988141747808e-01,   1.087699240539762746138e+00,   8.718592167691144867447e-01 ],
    [ 5.923934438628560839035e-01,   1.143478688772571416621e+00,   8.718592167691144867447e-01 ],
    [ 6.212906850268977709817e-01,   1.199258137005379643014e+00,   8.718592167691144867447e-01 ],
    [ 6.501879261909396801045e-01,   1.255037585238187869408e+00,   8.718592167691144867447e-01 ],
    [ 6.790851673549812561603e-01,   1.310817033470996539890e+00,   8.718592167691144867447e-01 ],
    [ 7.079824085190230542608e-01,   1.366596481703804766283e+00,   8.718592167691144867447e-01 ],
    [ 7.368796496830647413390e-01,   1.422375929936613214721e+00,   8.718592167691144867447e-01 ],
    [ 7.657768908471065394394e-01,   1.478155378169421219070e+00,   8.718592167691144867447e-01 ],
    [ 7.946741320111483375399e-01,   1.533934826402229889553e+00,   8.718592167691144867447e-01 ],
    [ 8.235713731751900246181e-01,   1.589714274635038337991e+00,   8.718592167691144867447e-01 ],
    [ 8.524686143392318227185e-01,   1.645493722867846342339e+00,   8.718592167691144867447e-01 ],
    [ 8.813658555032736208190e-01,   1.701273171100655012822e+00,   8.718592167691144867447e-01 ],
    [ 9.102630966673154189195e-01,   1.757052619333463239215e+00,   8.718592167691144867447e-01 ],
    [ 9.247117172493363179697e-01,   1.784942343449867241389e+00,   8.718592167691144867447e-01 ],
    [ 2.776323134773617251625e-01,   9.656015387370172620152e-01,   9.084708691207961095415e-01 ],
    [ 2.863083232735292860127e-01,   9.957765868225491034949e-01,   9.084708691207961095415e-01 ],
    [ 3.036603428658644077132e-01,   1.056126682993612675432e+00,   9.084708691207961095415e-01 ],
    [ 3.210123624581994739025e-01,   1.116476779164675914302e+00,   9.084708691207961095415e-01 ],
    [ 3.383643820505345400917e-01,   1.176826875335739597261e+00,   9.084708691207961095415e-01 ],
    [ 3.557164016428697728145e-01,   1.237176971506803280221e+00,   9.084708691207961095415e-01 ],
    [ 3.730684212352047834926e-01,   1.297527067677867185225e+00,   9.084708691207961095415e-01 ],
    [ 3.904204408275399607042e-01,   1.357877163848930424095e+00,   9.084708691207961095415e-01 ],
    [ 4.077724604198750824047e-01,   1.418227260019994329099e+00,   9.084708691207961095415e-01 ],
    [ 4.251244800122101485940e-01,   1.478577356191057345924e+00,   9.084708691207961095415e-01 ],
    [ 4.424764996045452147833e-01,   1.538927452362121250928e+00,   9.084708691207961095415e-01 ],
    [ 4.598285191968803919949e-01,   1.599277548533184933888e+00,   9.084708691207961095415e-01 ],
    [ 4.771805387892154581841e-01,   1.659627644704248394802e+00,   9.084708691207961095415e-01 ],
    [ 4.945325583815506353957e-01,   1.719977740875312077762e+00,   9.084708691207961095415e-01 ],
    [ 5.118845779738856460739e-01,   1.780327837046375538677e+00,   9.084708691207961095415e-01 ],
    [ 5.292365975662207677743e-01,   1.840677933217439221636e+00,   9.084708691207961095415e-01 ],
    [ 5.465886171585558894748e-01,   1.901028029388502904595e+00,   9.084708691207961095415e-01 ],
    [ 5.552646269547234503250e-01,   1.931203077474034524030e+00,   9.084708691207961095415e-01 ],
    [ 9.174737048053263621661e-02,   1.000000000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 9.461447580804926982267e-02,   1.031250000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.003486864630825925460e-01,   1.093749999999999777955e+00,   9.633883476483184882255e-01 ],
    [ 1.060828971181158597581e-01,   1.156249999999999777955e+00,   9.633883476483184882255e-01 ],
    [ 1.118171077731491269702e-01,   1.218750000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.175513184281824358157e-01,   1.281250000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.232855290832157030279e-01,   1.343750000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.290197397382490396289e-01,   1.406250000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.347539503932823068411e-01,   1.468750000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.404881610483156018088e-01,   1.531250000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.462223717033488690209e-01,   1.593750000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.519565823583821917442e-01,   1.656250000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.576907930134154589563e-01,   1.718749999999999777955e+00,   9.633883476483184882255e-01 ],
    [ 1.634250036684487539240e-01,   1.781249999999999777955e+00,   9.633883476483184882255e-01 ],
    [ 1.691592143234820488917e-01,   1.843750000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.748934249785153161039e-01,   1.906250000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.806276356335486388272e-01,   1.968750000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 1.834947409610652724332e-01,   2.000000000000000000000e+00,   9.633883476483184882255e-01 ],
    [ 0.000000000000000000000e+00,   1.000000000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.031250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.093750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.156250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.218750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.281250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.343750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.406250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.468750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.531250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.593750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.656250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.718750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.781250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.843750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.906250000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   1.968750000000000000000e+00,   1.000000000000000000000e+00 ],
    [ 0.000000000000000000000e+00,   2.000000000000000000000e+00,   1.000000000000000000000e+00 ]])

# 重複ありの総コントロールポイント数
allpointnumber_overlapping = 0
for i in range(patch_info.shape[0]):
    allpointnumber_overlapping += patch_info[i][0] * patch_info[i][1]

globalpoint = np.zeros((allpointnumber_overlapping))
globalpoint_x = np.zeros((allpointnumber_overlapping))
globalpoint_y = np.zeros((allpointnumber_overlapping))
globalpoint_w = np.zeros((allpointnumber_overlapping))
globalpoint_bool = np.zeros((allpointnumber_overlapping), dtype = bool)

localpoint = np.zeros((patch_info.shape[0], xi_max * eta_max))
localpoint_bool = np.zeros((patch_info.shape[0], xi_max * eta_max), dtype=bool)
for i in range(patch_info.shape[0]):
    localpoint_bool[i,:patch_info[i][0]*patch_info[i][1]] = True

xi_and_eta_max = xi_max
if xi_max < eta_max:
    xi_and_eta_max = eta_max
A = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max))
A_bool = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max), dtype=bool)

# connect patch
xi = 0
eta = 1
positive = 0
negative = 1

patch_number = 0
globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool = \
    mif.connect_patch_arg_0boundary(patch_number, patch_info, patch, patch_bool, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool)

# 座標，パッチコネクティビティー，境界の辺をtxt出力
# [patch_number, xi_or_eta, 0_or_1(int)] (auto marge)
boundary_array_0 = np.array([[0, eta, 0],
                             [0,  xi, 1]])

boundary_array_1 = np.array([[0,  xi, 1],
                             [0, eta, 1]])

boundary_number = 0
mif.write_date_header(filename)
mif.write_date_localpoint(filename, patch_info, localpoint, localpoint_bool)
mif.write_date_globalpoint(filename, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_0, boundary_number)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_1, boundary_number)


# 描写
color = np.array(["r", "g", "b", "c", "m", "y", "k"])
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

A = np.zeros((globalpoint[globalpoint_bool].shape[0],3))
for i in range(globalpoint[globalpoint_bool].shape[0]):
    A[i][0] = globalpoint[globalpoint_bool][i]
    A[i][1] = globalpoint_x[globalpoint_bool][i]
    A[i][2] = globalpoint_y[globalpoint_bool][i]
ax1.plot(A[:,1], A[:,2], c=color[0], marker="", linewidth=0.7)
for i in range(globalpoint[globalpoint_bool].shape[0]):
    ax1.text(A[i,1], A[i,2], str(int(A[i,0])), c=color[3], fontsize=6)

ax1.set_aspect('equal', adjustable='box')
ax1.set_axisbelow(True)
fig.set_figheight(9)
fig.set_figwidth(12)
ax1.grid()
ax1.set_xlim(-1, 11)
ax1.set_ylim(-1, 11)
plt.show()