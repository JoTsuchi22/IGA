import numpy as np
import matplotlib.pyplot as plt
import math
import make_inputdate_function as mif

# difine filename
filename = "connectivity_arc_loc2_10x10"

# patch info (ξ方向のコントロールポイント個数, η方向のコントロールポイント個数)
patch_info = np.array([10, 10])

# patch info 1行2列の時の例外処理
if np.array(patch_info.shape).shape[0] == 1:
    patch_info = np.array([[patch_info[0], patch_info[1]]])

xi_max = 0
eta_max = 0
for i in range(patch_info.shape[0]):
    if xi_max < patch_info[i][0]:
        xi_max = patch_info[i][0]
    if eta_max < patch_info[i][1]:
        eta_max = patch_info[i][1]

# パッチのコントロールポイント 座標，重み
patch = np.zeros((patch_info.shape[0], xi_max * eta_max, 3))
patch_bool = np.zeros((patch_info.shape[0], xi_max * eta_max, 3), dtype=bool)
for i in range(patch_info.shape[0]):
    patch_bool[i,:patch_info[i][0]*patch_info[i][1],:] = True

# 各パッチ入力
num = 0
patch[num,:patch_info[num][0]*patch_info[num][1],:] = np.array(
   [[1.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.2500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.7500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [2.2500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [2.7500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [3.2500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [3.7500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [4.2500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [4.7500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [5.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0000000000000000e+00,	9.1747370480532636e-02,	9.6338834764831849e-01],
    [1.2500000000000000e+00,	1.1468421310066579e-01,	9.6338834764831849e-01],
    [1.7499999999999998e+00,	1.6055789834093212e-01,	9.6338834764831849e-01],
    [2.2499999999999996e+00,	2.0643158358119842e-01,	9.6338834764831849e-01],
    [2.7500000000000000e+00,	2.5230526882146470e-01,	9.6338834764831849e-01],
    [3.2500000000000000e+00,	2.9817895406173106e-01,	9.6338834764831849e-01],
    [3.7500000000000000e+00,	3.4405263930199742e-01,	9.6338834764831849e-01],
    [4.2499999999999991e+00,	3.8992632454226372e-01,	9.6338834764831849e-01],
    [4.7500000000000000e+00,	4.3580000978252997e-01,	9.6338834764831849e-01],
    [5.0000000000000000e+00,	4.5873685240266315e-01,	9.6338834764831849e-01],
    [9.6560153873701726e-01,	2.7763231347736173e-01,	9.0847086912079611e-01],
    [1.2070019234212714e+00,	3.4704039184670216e-01,	9.0847086912079611e-01],
    [1.6898026927897802e+00,	4.8585654858538307e-01,	9.0847086912079611e-01],
    [2.1726034621582890e+00,	6.2467270532406383e-01,	9.0847086912079611e-01],
    [2.6554042315267967e+00,	7.6348886206274469e-01,	9.0847086912079611e-01],
    [3.1382050008953062e+00,	9.0230501880142555e-01,	9.0847086912079611e-01],
    [3.6210057702638148e+00,	1.0411211755401066e+00,	9.0847086912079611e-01],
    [4.1038065396323233e+00,	1.1799373322787872e+00,	9.0847086912079611e-01],
    [4.5866073090008310e+00,	1.3187534890174681e+00,	9.0847086912079611e-01],
    [4.8280076936850858e+00,	1.3881615673868086e+00,	9.0847086912079611e-01],
    [8.9247117172493362e-01,	4.6235585862466816e-01,	8.7185921676911449e-01],
    [1.1155889646561672e+00,	5.7794482328083507e-01,	8.7185921676911449e-01],
    [1.5618245505186341e+00,	8.0912275259316935e-01,	8.7185921676911449e-01],
    [2.0080601363811010e+00,	1.0403006819055034e+00,	8.7185921676911449e-01],
    [2.4542957222435673e+00,	1.2714786112178376e+00,	8.7185921676911449e-01],
    [2.9005313081060344e+00,	1.5026565405301715e+00,	8.7185921676911449e-01],
    [3.3467668939685011e+00,	1.7338344698425059e+00,	8.7185921676911449e-01],
    [3.7930024798309678e+00,	1.9650123991548396e+00,	8.7185921676911449e-01],
    [4.2392380656934350e+00,	2.1961903284671735e+00,	8.7185921676911449e-01],
    [4.4623558586246688e+00,	2.3117792931233403e+00,	8.7185921676911449e-01],
    [7.8033008588991060e-01,	6.3388347648318444e-01,	8.5355339059327373e-01],
    [9.7541260736238833e-01,	7.9235434560398055e-01,	8.5355339059327373e-01],
    [1.3655776503073438e+00,	1.1092960838455730e+00,	8.5355339059327373e-01],
    [1.7557426932522993e+00,	1.4262378220871652e+00,	8.5355339059327373e-01],
    [2.1459077361972541e+00,	1.7431795603287572e+00,	8.5355339059327373e-01],
    [2.5360727791422102e+00,	2.0601212985703494e+00,	8.5355339059327373e-01],
    [2.9262378220871650e+00,	2.3770630368119421e+00,	8.5355339059327373e-01],
    [3.3164028650321198e+00,	2.6940047750535339e+00,	8.5355339059327373e-01],
    [3.7065679079770759e+00,	3.0109465132951265e+00,	8.5355339059327373e-01],
    [3.9016504294495533e+00,	3.1694173824159222e+00,	8.5355339059327373e-01],
    [6.3388347648318444e-01,	7.8033008588991060e-01,	8.5355339059327373e-01],
    [7.9235434560398055e-01,	9.7541260736238833e-01,	8.5355339059327373e-01],
    [1.1092960838455730e+00,	1.3655776503073438e+00,	8.5355339059327373e-01],
    [1.4262378220871652e+00,	1.7557426932522993e+00,	8.5355339059327373e-01],
    [1.7431795603287572e+00,	2.1459077361972541e+00,	8.5355339059327373e-01],
    [2.0601212985703494e+00,	2.5360727791422102e+00,	8.5355339059327373e-01],
    [2.3770630368119421e+00,	2.9262378220871650e+00,	8.5355339059327373e-01],
    [2.6940047750535339e+00,	3.3164028650321198e+00,	8.5355339059327373e-01],
    [3.0109465132951265e+00,	3.7065679079770759e+00,	8.5355339059327373e-01],
    [3.1694173824159222e+00,	3.9016504294495533e+00,	8.5355339059327373e-01],
    [4.6235585862466816e-01,	8.9247117172493362e-01,	8.7185921676911449e-01],
    [5.7794482328083507e-01,	1.1155889646561672e+00,	8.7185921676911449e-01],
    [8.0912275259316935e-01,	1.5618245505186341e+00,	8.7185921676911449e-01],
    [1.0403006819055034e+00,	2.0080601363811010e+00,	8.7185921676911449e-01],
    [1.2714786112178376e+00,	2.4542957222435673e+00,	8.7185921676911449e-01],
    [1.5026565405301715e+00,	2.9005313081060344e+00,	8.7185921676911449e-01],
    [1.7338344698425059e+00,	3.3467668939685011e+00,	8.7185921676911449e-01],
    [1.9650123991548396e+00,	3.7930024798309678e+00,	8.7185921676911449e-01],
    [2.1961903284671735e+00,	4.2392380656934350e+00,	8.7185921676911449e-01],
    [2.3117792931233403e+00,	4.4623558586246688e+00,	8.7185921676911449e-01],
    [2.7763231347736173e-01,	9.6560153873701726e-01,	9.0847086912079611e-01],
    [3.4704039184670216e-01,	1.2070019234212714e+00,	9.0847086912079611e-01],
    [4.8585654858538307e-01,	1.6898026927897802e+00,	9.0847086912079611e-01],
    [6.2467270532406383e-01,	2.1726034621582890e+00,	9.0847086912079611e-01],
    [7.6348886206274469e-01,	2.6554042315267967e+00,	9.0847086912079611e-01],
    [9.0230501880142555e-01,	3.1382050008953062e+00,	9.0847086912079611e-01],
    [1.0411211755401066e+00,	3.6210057702638148e+00,	9.0847086912079611e-01],
    [1.1799373322787872e+00,	4.1038065396323233e+00,	9.0847086912079611e-01],
    [1.3187534890174681e+00,	4.5866073090008310e+00,	9.0847086912079611e-01],
    [1.3881615673868086e+00,	4.8280076936850858e+00,	9.0847086912079611e-01],
    [9.1747370480532636e-02,	1.0000000000000000e+00,	9.6338834764831849e-01],
    [1.1468421310066579e-01,	1.2500000000000000e+00,	9.6338834764831849e-01],
    [1.6055789834093212e-01,	1.7499999999999998e+00,	9.6338834764831849e-01],
    [2.0643158358119842e-01,	2.2499999999999996e+00,	9.6338834764831849e-01],
    [2.5230526882146470e-01,	2.7500000000000000e+00,	9.6338834764831849e-01],
    [2.9817895406173106e-01,	3.2500000000000000e+00,	9.6338834764831849e-01],
    [3.4405263930199742e-01,	3.7500000000000000e+00,	9.6338834764831849e-01],
    [3.8992632454226372e-01,	4.2499999999999991e+00,	9.6338834764831849e-01],
    [4.3580000978252997e-01,	4.7500000000000000e+00,	9.6338834764831849e-01],
    [4.5873685240266315e-01,	5.0000000000000000e+00,	9.6338834764831849e-01],
    [0.0000000000000000e+00,	1.0000000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.2500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.7500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	2.2500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	2.7500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	3.2500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	3.7500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	4.2500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	4.7500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	5.0000000000000000e+00,	1.0000000000000000e+00]])

# 重複ありの総コントロールポイント数
allpointnumber_overlapping = 0
for i in range(patch_info.shape[0]):
    allpointnumber_overlapping += patch_info[i][0] * patch_info[i][1]

globalpoint = np.zeros((allpointnumber_overlapping))
globalpoint_x = np.zeros((allpointnumber_overlapping))
globalpoint_y = np.zeros((allpointnumber_overlapping))
globalpoint_w = np.zeros((allpointnumber_overlapping))
globalpoint_bool = np.zeros((allpointnumber_overlapping), dtype = bool)

localpoint = np.zeros((patch_info.shape[0], xi_max * eta_max))
localpoint_bool = np.zeros((patch_info.shape[0], xi_max * eta_max), dtype=bool)
for i in range(patch_info.shape[0]):
    localpoint_bool[i,:patch_info[i][0]*patch_info[i][1]] = True

xi_and_eta_max = xi_max
if xi_max < eta_max:
    xi_and_eta_max = eta_max
A = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max))
A_bool = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max), dtype=bool)

# connect patch
xi = 0
eta = 1
positive = 0
negative = 1

patch_number = 0
globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool = \
    mif.connect_patch_arg_0boundary(patch_number, patch_info, patch, patch_bool, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool)

# 座標，パッチコネクティビティー，境界の辺をtxt出力
# [patch_number, xi_or_eta, 0_or_1(int)] (auto marge)
boundary_array_0 = np.array([[0, eta, 0],
                             [0, xi, 1]])

boundary_array_1 = np.array([[0,  xi, 1],
                             [0, eta, 1]])

boundary_number = 0
mif.write_date_header(filename)
mif.write_date_localpoint(filename, patch_info, localpoint, localpoint_bool)
mif.write_date_globalpoint(filename, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_0, boundary_number)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_1, boundary_number)


# 描写
color = np.array(["r", "g", "b", "c", "m", "y", "k"])
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

A = np.zeros((globalpoint[globalpoint_bool].shape[0],3))
for i in range(globalpoint[globalpoint_bool].shape[0]):
    A[i][0] = globalpoint[globalpoint_bool][i]
    A[i][1] = globalpoint_x[globalpoint_bool][i]
    A[i][2] = globalpoint_y[globalpoint_bool][i]
ax1.plot(A[:,1], A[:,2], c=color[0], marker="", linewidth=0.7)
for i in range(globalpoint[globalpoint_bool].shape[0]):
    ax1.text(A[i,1], A[i,2], str(int(A[i,0])), c=color[3], fontsize=6)


ax1.set_aspect('equal', adjustable='box')
ax1.set_axisbelow(True)
fig.set_figheight(9)
fig.set_figwidth(12)
ax1.grid()
ax1.set_xlim(-1, 3)
ax1.set_ylim(-1, 3)
plt.show()