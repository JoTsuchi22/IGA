import numpy as np
import matplotlib.pyplot as plt
import math
import make_inputdate_function as mif

# difine filename
filename = "connectivity_arc_loc3_11x11"

# patch info (ξ方向のコントロールポイント個数, η方向のコントロールポイント個数)
patch_info = np.array([11, 11])

# patch info 1行2列の時の例外処理
if np.array(patch_info.shape).shape[0] == 1:
    patch_info = np.array([[patch_info[0], patch_info[1]]])

xi_max = 0
eta_max = 0
for i in range(patch_info.shape[0]):
    if xi_max < patch_info[i][0]:
        xi_max = patch_info[i][0]
    if eta_max < patch_info[i][1]:
        eta_max = patch_info[i][1]

# パッチのコントロールポイント 座標，重み
patch = np.zeros((patch_info.shape[0], xi_max * eta_max, 3))
patch_bool = np.zeros((patch_info.shape[0], xi_max * eta_max, 3), dtype=bool)
for i in range(patch_info.shape[0]):
    patch_bool[i,:patch_info[i][0]*patch_info[i][1],:] = True

# 各パッチ入力
num = 0
patch[num,:patch_info[num][0]*patch_info[num][1],:] = np.array(
   [[1.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0416666666666667e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.1249999999999998e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.2500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.3750000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.5000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.6250000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.7500000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.8750000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.9583333333333333e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [2.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0000000000000000e+00,	6.8739259764640390e-02,	9.7559223176554566e-01],
    [1.0416666666666667e+00,	7.1603395588167085e-02,	9.7559223176554566e-01],
    [1.1249999999999998e+00,	7.7331667235220433e-02,	9.7559223176554566e-01],
    [1.2500000000000002e+00,	8.5924074705800491e-02,	9.7559223176554566e-01],
    [1.3750000000000000e+00,	9.4516482176380534e-02,	9.7559223176554566e-01],
    [1.5000000000000000e+00,	1.0310888964696061e-01,	9.7559223176554566e-01],
    [1.6250000000000000e+00,	1.1170129711754065e-01,	9.7559223176554566e-01],
    [1.7499999999999998e+00,	1.2029370458812068e-01,	9.7559223176554566e-01],
    [1.8750000000000000e+00,	1.2888611205870076e-01,	9.7559223176554566e-01],
    [1.9583333333333330e+00,	1.3461438370575410e-01,	9.7559223176554566e-01],
    [2.0000000000000000e+00,	1.3747851952928078e-01,	9.7559223176554566e-01],
    [9.9101417307161477e-01,	2.0667401935286048e-01,	9.3287863735525056e-01],
    [1.0323064302829319e+00,	2.1528543682589635e-01,	9.3287863735525056e-01],
    [1.1148909447055666e+00,	2.3250827177196801e-01,	9.3287863735525056e-01],
    [1.2387677163395185e+00,	2.5834252419107556e-01,	9.3287863735525056e-01],
    [1.3626444879734703e+00,	2.8417677661018309e-01,	9.3287863735525056e-01],
    [1.4865212596074222e+00,	3.1001102902929073e-01,	9.3287863735525056e-01],
    [1.6103980312413742e+00,	3.3584528144839826e-01,	9.3287863735525056e-01],
    [1.7342748028753254e+00,	3.6167953386750573e-01,	9.3287863735525056e-01],
    [1.8581515745092774e+00,	3.8751378628661343e-01,	9.3287863735525056e-01],
    [1.9407360889319121e+00,	4.0473662123268506e-01,	9.3287863735525056e-01],
    [1.9820283461432295e+00,	4.1334803870572095e-01,	9.3287863735525056e-01],
    [9.4544895330087464e-01,	4.0417844084848870e-01,	8.8711407191564851e-01],
    [9.8484265968841123e-01,	4.2101920921717584e-01,	8.8711407191564851e-01],
    [1.0636300724634835e+00,	4.5470074595454962e-01,	8.8711407191564873e-01],
    [1.1818111916260929e+00,	5.0522305106061072e-01,	8.8711407191564873e-01],
    [1.2999923107887026e+00,	5.5574535616667198e-01,	8.8711407191564851e-01],
    [1.4181734299513120e+00,	6.0626766127273313e-01,	8.8711407191564851e-01],
    [1.5363545491139212e+00,	6.5678996637879417e-01,	8.8711407191564851e-01],
    [1.6545356682765306e+00,	7.0731227148485520e-01,	8.8711407191564851e-01],
    [1.7727167874391401e+00,	7.5783457659091646e-01,	8.8711407191564851e-01],
    [1.8515042002142128e+00,	7.9151611332829030e-01,	8.8711407191564851e-01],
    [1.8908979066017493e+00,	8.0835688169697739e-01,	8.8711407191564851e-01],
    [8.6258698533338429e-01,	5.8596901200073126e-01,	8.5965533265188732e-01],
    [8.9852810972227559e-01,	6.1038438750076185e-01,	8.5965533265188732e-01],
    [9.7041035850005719e-01,	6.5921513850082258e-01,	8.5965533265188743e-01],
    [1.0782337316667305e+00,	7.3246126500091413e-01,	8.5965533265188743e-01],
    [1.1860571048334037e+00,	8.0570739150100545e-01,	8.5965533265188732e-01],
    [1.2938804780000766e+00,	8.7895351800109711e-01,	8.5965533265188732e-01],
    [1.4017038511667497e+00,	9.5219964450118844e-01,	8.5965533265188732e-01],
    [1.5095272243334226e+00,	1.0254457710012799e+00,	8.5965533265188732e-01],
    [1.6173505975000957e+00,	1.0986918975013713e+00,	8.5965533265188732e-01],
    [1.6892328462778778e+00,	1.1475226485014323e+00,	8.5965533265188732e-01],
    [1.7251739706667686e+00,	1.1719380240014625e+00,	8.5965533265188732e-01],
    [7.4147586390949227e-01,	7.4147586390949227e-01,	8.5050241956396699e-01],
    [7.7237069157238780e-01,	7.7237069157238780e-01,	8.5050241956396699e-01],
    [8.3416034689817864e-01,	8.3416034689817864e-01,	8.5050241956396710e-01],
    [9.2684482988686523e-01,	9.2684482988686501e-01,	8.5050241956396710e-01],
    [1.0195293128755518e+00,	1.0195293128755516e+00,	8.5050241956396699e-01],
    [1.1122137958642384e+00,	1.1122137958642384e+00,	8.5050241956396699e-01],
    [1.2048982788529250e+00,	1.2048982788529250e+00,	8.5050241956396699e-01],
    [1.2975827618416114e+00,	1.2975827618416114e+00,	8.5050241956396699e-01],
    [1.3902672448302977e+00,	1.3902672448302980e+00,	8.5050241956396699e-01],
    [1.4520569001560888e+00,	1.4520569001560888e+00,	8.5050241956396699e-01],
    [1.4829517278189845e+00,	1.4829517278189845e+00,	8.5050241956396699e-01],
    [5.8596901200073126e-01,	8.6258698533338429e-01,	8.5965533265188743e-01],
    [6.1038438750076174e-01,	8.9852810972227537e-01,	8.5965533265188743e-01],
    [6.5921513850082258e-01,	9.7041035850005730e-01,	8.5965533265188743e-01],
    [7.3246126500091424e-01,	1.0782337316667303e+00,	8.5965533265188743e-01],
    [8.0570739150100557e-01,	1.1860571048334034e+00,	8.5965533265188743e-01],
    [8.7895351800109689e-01,	1.2938804780000766e+00,	8.5965533265188743e-01],
    [9.5219964450118832e-01,	1.4017038511667494e+00,	8.5965533265188743e-01],
    [1.0254457710012796e+00,	1.5095272243334226e+00,	8.5965533265188743e-01],
    [1.0986918975013709e+00,	1.6173505975000957e+00,	8.5965533265188743e-01],
    [1.1475226485014318e+00,	1.6892328462778776e+00,	8.5965533265188743e-01],
    [1.1719380240014625e+00,	1.7251739706667686e+00,	8.5965533265188743e-01],
    [4.0417844084848864e-01,	9.4544895330087475e-01,	8.8711407191564851e-01],
    [4.2101920921717573e-01,	9.8484265968841112e-01,	8.8711407191564851e-01],
    [4.5470074595454973e-01,	1.0636300724634837e+00,	8.8711407191564862e-01],
    [5.0522305106061083e-01,	1.1818111916260929e+00,	8.8711407191564862e-01],
    [5.5574535616667209e-01,	1.2999923107887024e+00,	8.8711407191564851e-01],
    [6.0626766127273313e-01,	1.4181734299513118e+00,	8.8711407191564851e-01],
    [6.5678996637879417e-01,	1.5363545491139212e+00,	8.8711407191564851e-01],
    [7.0731227148485509e-01,	1.6545356682765306e+00,	8.8711407191564851e-01],
    [7.5783457659091624e-01,	1.7727167874391401e+00,	8.8711407191564851e-01],
    [7.9151611332829030e-01,	1.8515042002142128e+00,	8.8711407191564851e-01],
    [8.0835688169697728e-01,	1.8908979066017495e+00,	8.8711407191564851e-01],
    [2.0667401935286048e-01,	9.9101417307161477e-01,	9.3287863735525045e-01],
    [2.1528543682589632e-01,	1.0323064302829321e+00,	9.3287863735525045e-01],
    [2.3250827177196801e-01,	1.1148909447055666e+00,	9.3287863735525045e-01],
    [2.5834252419107556e-01,	1.2387677163395185e+00,	9.3287863735525045e-01],
    [2.8417677661018320e-01,	1.3626444879734705e+00,	9.3287863735525045e-01],
    [3.1001102902929079e-01,	1.4865212596074224e+00,	9.3287863735525045e-01],
    [3.3584528144839826e-01,	1.6103980312413739e+00,	9.3287863735525045e-01],
    [3.6167953386750573e-01,	1.7342748028753256e+00,	9.3287863735525045e-01],
    [3.8751378628661326e-01,	1.8581515745092778e+00,	9.3287863735525045e-01],
    [4.0473662123268506e-01,	1.9407360889319123e+00,	9.3287863735525045e-01],
    [4.1334803870572095e-01,	1.9820283461432295e+00,	9.3287863735525045e-01],
    [6.8739259764640376e-02,	1.0000000000000000e+00,	9.7559223176554566e-01],
    [7.1603395588167071e-02,	1.0416666666666667e+00,	9.7559223176554566e-01],
    [7.7331667235220419e-02,	1.1249999999999998e+00,	9.7559223176554566e-01],
    [8.5924074705800477e-02,	1.2499999999999998e+00,	9.7559223176554566e-01],
    [9.4516482176380534e-02,	1.3750000000000000e+00,	9.7559223176554566e-01],
    [1.0310888964696061e-01,	1.5000000000000000e+00,	9.7559223176554566e-01],
    [1.1170129711754061e-01,	1.6249999999999998e+00,	9.7559223176554566e-01],
    [1.2029370458812065e-01,	1.7499999999999998e+00,	9.7559223176554566e-01],
    [1.2888611205870071e-01,	1.8750000000000000e+00,	9.7559223176554566e-01],
    [1.3461438370575407e-01,	1.9583333333333330e+00,	9.7559223176554566e-01],
    [1.3747851952928075e-01,	2.0000000000000000e+00,	9.7559223176554566e-01],
    [0.0000000000000000e+00,	1.0000000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.0416666666666667e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.1249999999999998e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.2500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.3750000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.5000000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.6250000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.7500000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.8750000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.9583333333333333e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	2.0000000000000000e+00,	1.0000000000000000e+00]])

# 重複ありの総コントロールポイント数
allpointnumber_overlapping = 0
for i in range(patch_info.shape[0]):
    allpointnumber_overlapping += patch_info[i][0] * patch_info[i][1]

globalpoint = np.zeros((allpointnumber_overlapping))
globalpoint_x = np.zeros((allpointnumber_overlapping))
globalpoint_y = np.zeros((allpointnumber_overlapping))
globalpoint_w = np.zeros((allpointnumber_overlapping))
globalpoint_bool = np.zeros((allpointnumber_overlapping), dtype = bool)

localpoint = np.zeros((patch_info.shape[0], xi_max * eta_max))
localpoint_bool = np.zeros((patch_info.shape[0], xi_max * eta_max), dtype=bool)
for i in range(patch_info.shape[0]):
    localpoint_bool[i,:patch_info[i][0]*patch_info[i][1]] = True

xi_and_eta_max = xi_max
if xi_max < eta_max:
    xi_and_eta_max = eta_max
A = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max))
A_bool = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max), dtype=bool)

# connect patch
xi = 0
eta = 1
positive = 0
negative = 1

patch_number = 0
globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool = \
    mif.connect_patch_arg_0boundary(patch_number, patch_info, patch, patch_bool, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool)

# 座標，パッチコネクティビティー，境界の辺をtxt出力
# [patch_number, xi_or_eta, 0_or_1(int)] (auto marge)
boundary_array_0 = np.array([[0, eta, 0],
                             [0, xi, 1]])

boundary_array_1 = np.array([[0,  xi, 1],
                             [0, eta, 1]])

boundary_number = 0
mif.write_date_header(filename)
mif.write_date_localpoint(filename, patch_info, localpoint, localpoint_bool)
mif.write_date_globalpoint(filename, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_0, boundary_number)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_1, boundary_number)


# 描写
color = np.array(["r", "g", "b", "c", "m", "y", "k"])
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

A = np.zeros((globalpoint[globalpoint_bool].shape[0],3))
for i in range(globalpoint[globalpoint_bool].shape[0]):
    A[i][0] = globalpoint[globalpoint_bool][i]
    A[i][1] = globalpoint_x[globalpoint_bool][i]
    A[i][2] = globalpoint_y[globalpoint_bool][i]
ax1.plot(A[:,1], A[:,2], c=color[0], marker="", linewidth=0.7)
for i in range(globalpoint[globalpoint_bool].shape[0]):
    ax1.text(A[i,1], A[i,2], str(int(A[i,0])), c=color[3], fontsize=6)


ax1.set_aspect('equal', adjustable='box')
ax1.set_axisbelow(True)
fig.set_figheight(9)
fig.set_figwidth(12)
ax1.grid()
ax1.set_xlim(-1, 3)
ax1.set_ylim(-1, 3)
plt.show()