import numpy as np
import matplotlib.pyplot as plt
import math
import make_inputdate_function as mif

# difine filename
filename = "connectivity_arc_loc2_10x10"

# patch info (ξ方向のコントロールポイント個数, η方向のコントロールポイント個数)
patch_info = np.array([10, 10])

# patch info 1行2列の時の例外処理
if np.array(patch_info.shape).shape[0] == 1:
    patch_info = np.array([[patch_info[0], patch_info[1]]])

xi_max = 0
eta_max = 0
for i in range(patch_info.shape[0]):
    if xi_max < patch_info[i][0]:
        xi_max = patch_info[i][0]
    if eta_max < patch_info[i][1]:
        eta_max = patch_info[i][1]

# パッチのコントロールポイント 座標，重み
patch = np.zeros((patch_info.shape[0], xi_max * eta_max, 3))
patch_bool = np.zeros((patch_info.shape[0], xi_max * eta_max, 3), dtype=bool)
for i in range(patch_info.shape[0]):
    patch_bool[i,:patch_info[i][0]*patch_info[i][1],:] = True

# 各パッチ入力
num = 0
patch[num,:patch_info[num][0]*patch_info[num][1],:] = np.array(
   [[1.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0625000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.1875000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.3125000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.4375000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.5625000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.6875000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.8125000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.9375000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [2.0000000000000000e+00,	0.0000000000000000e+00,	1.0000000000000000e+00],
    [1.0000000000000000e+00,	9.1747370480532636e-02,	9.6338834764831849e-01],
    [1.0624999999999998e+00,	9.7481581135565931e-02,	9.6338834764831849e-01],
    [1.1875000000000000e+00,	1.0895000244563249e-01,	9.6338834764831849e-01],
    [1.3125000000000000e+00,	1.2041842375569908e-01,	9.6338834764831849e-01],
    [1.4375000000000000e+00,	1.3188684506576567e-01,	9.6338834764831849e-01],
    [1.5625000000000000e+00,	1.4335526637583224e-01,	9.6338834764831849e-01],
    [1.6874999999999998e+00,	1.5482368768589883e-01,	9.6338834764831849e-01],
    [1.8124999999999998e+00,	1.6629210899596542e-01,	9.6338834764831849e-01],
    [1.9375000000000000e+00,	1.7776053030603195e-01,	9.6338834764831849e-01],
    [2.0000000000000000e+00,	1.8349474096106527e-01,	9.6338834764831849e-01],
    [9.6560153873701726e-01,	2.7763231347736173e-01,	9.0847086912079611e-01],
    [1.0259516349080808e+00,	2.9498433306969679e-01,	9.0847086912079611e-01],
    [1.1466518272502078e+00,	3.2968837225436703e-01,	9.0847086912079611e-01],
    [1.2673520195923351e+00,	3.6439241143903722e-01,	9.0847086912079611e-01],
    [1.3880522119344620e+00,	3.9909645062370752e-01,	9.0847086912079611e-01],
    [1.5087524042765892e+00,	4.3380048980837765e-01,	9.0847086912079611e-01],
    [1.6294525966187168e+00,	4.6850452899304790e-01,	9.0847086912079611e-01],
    [1.7501527889608437e+00,	5.0320856817771820e-01,	9.0847086912079611e-01],
    [1.8708529813029711e+00,	5.3791260736238822e-01,	9.0847086912079611e-01],
    [1.9312030774740345e+00,	5.5526462695472345e-01,	9.0847086912079611e-01],
    [8.9247117172493362e-01,	4.6235585862466816e-01,	8.7185921676911449e-01],
    [9.4825061995774196e-01,	4.9125309978870990e-01,	8.7185921676911449e-01],
    [1.0598095164233587e+00,	5.4904758211679339e-01,	8.7185921676911449e-01],
    [1.1713684128889756e+00,	6.0684206444487687e-01,	8.7185921676911449e-01],
    [1.2829273093545921e+00,	6.6463654677296047e-01,	8.7185921676911449e-01],
    [1.3944862058202088e+00,	7.2243102910104395e-01,	8.7185921676911449e-01],
    [1.5060451022858257e+00,	7.8022551142912755e-01,	8.7185921676911449e-01],
    [1.6176039987514423e+00,	8.3801999375721103e-01,	8.7185921676911449e-01],
    [1.7291628952170590e+00,	8.9581447608529441e-01,	8.7185921676911449e-01],
    [1.7849423434498672e+00,	9.2471171724933632e-01,	8.7185921676911449e-01],
    [7.8033008588991060e-01,	6.3388347648318444e-01,	8.5355339059327373e-01],
    [8.2910071625802995e-01,	6.7350119376338347e-01,	8.5355339059327373e-01],
    [9.2664197699426898e-01,	7.5273662832378163e-01,	8.5355339059327373e-01],
    [1.0241832377305078e+00,	8.3197206288417969e-01,	8.5355339059327373e-01],
    [1.1217244984667467e+00,	9.1120749744457774e-01,	8.5355339059327373e-01],
    [1.2192657592029854e+00,	9.9044293200497568e-01,	8.5355339059327373e-01],
    [1.3168070199392243e+00,	1.0696783665653740e+00,	8.5355339059327373e-01],
    [1.4143482806754633e+00,	1.1489138011257718e+00,	8.5355339059327373e-01],
    [1.5118895414117020e+00,	1.2281492356861698e+00,	8.5355339059327373e-01],
    [1.5606601717798212e+00,	1.2677669529663689e+00,	8.5355339059327373e-01],
    [6.3388347648318444e-01,	7.8033008588991060e-01,	8.5355339059327373e-01],
    [6.7350119376338347e-01,	8.2910071625802995e-01,	8.5355339059327373e-01],
    [7.5273662832378163e-01,	9.2664197699426898e-01,	8.5355339059327373e-01],
    [8.3197206288417969e-01,	1.0241832377305078e+00,	8.5355339059327373e-01],
    [9.1120749744457774e-01,	1.1217244984667467e+00,	8.5355339059327373e-01],
    [9.9044293200497568e-01,	1.2192657592029854e+00,	8.5355339059327373e-01],
    [1.0696783665653740e+00,	1.3168070199392243e+00,	8.5355339059327373e-01],
    [1.1489138011257718e+00,	1.4143482806754633e+00,	8.5355339059327373e-01],
    [1.2281492356861698e+00,	1.5118895414117020e+00,	8.5355339059327373e-01],
    [1.2677669529663689e+00,	1.5606601717798212e+00,	8.5355339059327373e-01],
    [4.6235585862466816e-01,	8.9247117172493362e-01,	8.7185921676911449e-01],
    [4.9125309978870990e-01,	9.4825061995774196e-01,	8.7185921676911449e-01],
    [5.4904758211679339e-01,	1.0598095164233587e+00,	8.7185921676911449e-01],
    [6.0684206444487687e-01,	1.1713684128889756e+00,	8.7185921676911449e-01],
    [6.6463654677296047e-01,	1.2829273093545921e+00,	8.7185921676911449e-01],
    [7.2243102910104395e-01,	1.3944862058202088e+00,	8.7185921676911449e-01],
    [7.8022551142912755e-01,	1.5060451022858257e+00,	8.7185921676911449e-01],
    [8.3801999375721103e-01,	1.6176039987514423e+00,	8.7185921676911449e-01],
    [8.9581447608529441e-01,	1.7291628952170590e+00,	8.7185921676911449e-01],
    [9.2471171724933632e-01,	1.7849423434498672e+00,	8.7185921676911449e-01],
    [2.7763231347736173e-01,	9.6560153873701726e-01,	9.0847086912079611e-01],
    [2.9498433306969679e-01,	1.0259516349080808e+00,	9.0847086912079611e-01],
    [3.2968837225436703e-01,	1.1466518272502078e+00,	9.0847086912079611e-01],
    [3.6439241143903722e-01,	1.2673520195923351e+00,	9.0847086912079611e-01],
    [3.9909645062370752e-01,	1.3880522119344620e+00,	9.0847086912079611e-01],
    [4.3380048980837765e-01,	1.5087524042765892e+00,	9.0847086912079611e-01],
    [4.6850452899304790e-01,	1.6294525966187168e+00,	9.0847086912079611e-01],
    [5.0320856817771820e-01,	1.7501527889608437e+00,	9.0847086912079611e-01],
    [5.3791260736238822e-01,	1.8708529813029711e+00,	9.0847086912079611e-01],
    [5.5526462695472345e-01,	1.9312030774740345e+00,	9.0847086912079611e-01],
    [9.1747370480532636e-02,	1.0000000000000000e+00,	9.6338834764831849e-01],
    [9.7481581135565931e-02,	1.0624999999999998e+00,	9.6338834764831849e-01],
    [1.0895000244563249e-01,	1.1875000000000000e+00,	9.6338834764831849e-01],
    [1.2041842375569908e-01,	1.3125000000000000e+00,	9.6338834764831849e-01],
    [1.3188684506576567e-01,	1.4375000000000000e+00,	9.6338834764831849e-01],
    [1.4335526637583224e-01,	1.5625000000000000e+00,	9.6338834764831849e-01],
    [1.5482368768589883e-01,	1.6874999999999998e+00,	9.6338834764831849e-01],
    [1.6629210899596542e-01,	1.8124999999999998e+00,	9.6338834764831849e-01],
    [1.7776053030603195e-01,	1.9375000000000000e+00,	9.6338834764831849e-01],
    [1.8349474096106527e-01,	2.0000000000000000e+00,	9.6338834764831849e-01],
    [0.0000000000000000e+00,	1.0000000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.0625000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.1875000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.3125000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.4375000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.5625000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.6875000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.8125000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	1.9375000000000000e+00,	1.0000000000000000e+00],
    [0.0000000000000000e+00,	2.0000000000000000e+00,	1.0000000000000000e+00]])

# 重複ありの総コントロールポイント数
allpointnumber_overlapping = 0
for i in range(patch_info.shape[0]):
    allpointnumber_overlapping += patch_info[i][0] * patch_info[i][1]

globalpoint = np.zeros((allpointnumber_overlapping))
globalpoint_x = np.zeros((allpointnumber_overlapping))
globalpoint_y = np.zeros((allpointnumber_overlapping))
globalpoint_w = np.zeros((allpointnumber_overlapping))
globalpoint_bool = np.zeros((allpointnumber_overlapping), dtype = bool)

localpoint = np.zeros((patch_info.shape[0], xi_max * eta_max))
localpoint_bool = np.zeros((patch_info.shape[0], xi_max * eta_max), dtype=bool)
for i in range(patch_info.shape[0]):
    localpoint_bool[i,:patch_info[i][0]*patch_info[i][1]] = True

xi_and_eta_max = xi_max
if xi_max < eta_max:
    xi_and_eta_max = eta_max
A = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max))
A_bool = np.zeros((patch_info.shape[0], 2, 2, xi_and_eta_max), dtype=bool)

# connect patch
xi = 0
eta = 1
positive = 0
negative = 1

patch_number = 0
globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool = \
    mif.connect_patch_arg_0boundary(patch_number, patch_info, patch, patch_bool, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w, localpoint, localpoint_bool, A, A_bool)

# 座標，パッチコネクティビティー，境界の辺をtxt出力
# [patch_number, xi_or_eta, 0_or_1(int)] (auto marge)
boundary_array_0 = np.array([[0, eta, 0],
                             [0, xi, 1]])

boundary_array_1 = np.array([[0,  xi, 1],
                             [0, eta, 1]])

boundary_number = 0
mif.write_date_header(filename)
mif.write_date_localpoint(filename, patch_info, localpoint, localpoint_bool)
mif.write_date_globalpoint(filename, globalpoint, globalpoint_bool, globalpoint_x, globalpoint_y, globalpoint_w)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_0, boundary_number)
boundary_number = mif.write_boundary(filename, A, A_bool, boundary_array_1, boundary_number)


# 描写
color = np.array(["r", "g", "b", "c", "m", "y", "k"])
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

A = np.zeros((globalpoint[globalpoint_bool].shape[0],3))
for i in range(globalpoint[globalpoint_bool].shape[0]):
    A[i][0] = globalpoint[globalpoint_bool][i]
    A[i][1] = globalpoint_x[globalpoint_bool][i]
    A[i][2] = globalpoint_y[globalpoint_bool][i]
ax1.plot(A[:,1], A[:,2], c=color[0], marker="", linewidth=0.7)
for i in range(globalpoint[globalpoint_bool].shape[0]):
    ax1.text(A[i,1], A[i,2], str(int(A[i,0])), c=color[3], fontsize=6)


ax1.set_aspect('equal', adjustable='box')
ax1.set_axisbelow(True)
fig.set_figheight(9)
fig.set_figwidth(12)
ax1.grid()
ax1.set_xlim(-1, 3)
ax1.set_ylim(-1, 3)
plt.show()